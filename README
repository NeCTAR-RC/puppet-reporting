reporting-pollster
------------------
Package name: python-reporting-pollster (currently v0.1.0)
Extra dependencies (outside the normal Ubuntu 14.04
repositories): python-mysql.connector >= 2.0.4.
        - I've verified that the package from 15.10 installs without
          issues
Configuration: /etc/reporting-pollster/reporting.conf
Config notes: The config file is just a set of three credentials, one
for the source database, one for the local database, and a set of nova
credentials, each in their own config section (i.e. [remote], [local],
[nova]).
Use: the update-db.py script (which I'm going to rename at some point
soon, because I keep realising how stupid that name is), which is run
thusly:
update-db.py --config-file /etc/reporting-pollster/reporting.conf
--full-run --debug
(at least when I run it). It updates (where possible) from the time of
the previous update for each table, so a normal run should be fairly
quick. Use --force-update to reload /all/ the data (ten or twenty
minutes).

This code requires read-only access to the live database.

The only other thing missing at the moment is a cron job to run it
regularly. I don't really know what the timing we'll use is, since it
depends on the exact impact on the system - that'll have to wait until
it can be run against the live system.

reporting-api
-------------
Package name: python-reporing-api (currently v0.1.0)
Extra dependencies: python-mysql.connector >= 2.0.4, python-wsgicors >=
0.4.1. Both the 15.10 packages work fine.
Configuration: /etc/reporting-api/
                        - apivi.ini
                        - paste.config
The apiv1.ini file specifies the credentials for the database, the
keystone credentials and the keystone role that provides authorisation
to access the API. The paste.config file is mostly internal, except for
the [server] section at the bottom that specifies the listen address and
port.
There's an init file (/etc/init.d/reporting-api) that controls the
service, and an /etc/default/reporting-api file specifying the arguments
for the server script.
The actual executable is called reporting-api, and is run like this:
reporting-api --confdir /etc/reporting-api/
--logfile /var/run/reporting-api.log

reporting-view
--------------
Package name: reporting-view (currently v0.1.0)
Extra dependencies: nothing, but the assumption is that it runs with
apache and mod_wsgi.
Configuration: /etc/reporting-view/config.js
This requires only two things to be customised: the baseURL (the site's
top level URL), and the endpoint, which needs to point at the API
server. Simple and to the point ;-)
There's a sample apache.conf file in /usr/share/doc/reporting-vew/ which
in my testing needs exactly two changes to work: setting the ServerName
and the ServerAdmin (of course, only the ServerName /needs/ to
change . . .)
The app itself is almost entirely javascript served
from /usr/share/reporting-view/static, with a minimal python-flask based
app to handle logging in.


